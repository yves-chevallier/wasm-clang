(()=>{"use strict";var __webpack_modules__={29947:(Q,B,U)=>{Q.exports=U.p+"ff94d503183be35a0ea6.wasm"},89990:(Q,B,U)=>{Q.exports=U.p+"2161241b8cce7ee86bbe.wasm"},23152:(Q,B,U)=>{Q.exports=U.p+"3fb3dd83d480c566b4b9.wasm"},52360:(Q,B,U)=>{Q.exports=U.p+"4ce9cad67016c3292787.tar"},25572:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\nvar comlink = __webpack_require__(14590);\n;// CONCATENATED MODULE: ./src/wasm/utils.js\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\n * Get an object with the given names from the given object.\n */\nvar getImportObject = function getImportObject(obj, names) {\n  return names.reduce(function (result, name) {\n    result[name] = obj[name].bind(obj);\n    return result;\n  }, {});\n};\n\n/**\n * Read a string from a Uint8Array.\n */\nvar utils_readStr = function readStr(u8, o) {\n  var len = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  var end = len === -1 ? u8.length : o + len;\n  return String.fromCharCode.apply(String, _toConsumableArray(u8.slice(o, end).filter(function (_byte) {\n    return _byte !== 0;\n  })));\n};\nvar ESUCCESS = 0;\n;// CONCATENATED MODULE: ./src/wasm/memory.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\nvar Memory = /*#__PURE__*/function () {\n  function Memory(memory) {\n    _classCallCheck(this, Memory);\n    this.memory = memory;\n    this.buffer = this.memory.buffer;\n    this.u8 = new Uint8Array(this.buffer);\n    this.u32 = new Uint32Array(this.buffer);\n  }\n  return _createClass(Memory, [{\n    key: "check",\n    value: function check() {\n      if (this.buffer.byteLength === 0) {\n        this.buffer = this.memory.buffer;\n        this.u8 = new Uint8Array(this.buffer);\n        this.u32 = new Uint32Array(this.buffer);\n      }\n    }\n  }, {\n    key: "read8",\n    value: function read8(o) {\n      return this.u8[o];\n    }\n  }, {\n    key: "read32",\n    value: function read32(o) {\n      return this.u32[o >> 2];\n    }\n  }, {\n    key: "write8",\n    value: function write8(o, v) {\n      this.u8[o] = v;\n    }\n  }, {\n    key: "write32",\n    value: function write32(o, v) {\n      this.u32[o >> 2] = v;\n    }\n  }, {\n    key: "write64",\n    value: function write64(o, vlo) {\n      var vhi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this.write32(o, vlo);\n      this.write32(o + 4, vhi);\n    }\n  }, {\n    key: "readStr",\n    value: function readStr(o, len) {\n      return utils_readStr(this.u8, o, len);\n    }\n\n    // Null-terminated string.\n  }, {\n    key: "writeStr",\n    value: function writeStr(o, str) {\n      o += this.write(o, str);\n      this.write8(o, 0);\n      return str.length + 1;\n    }\n  }, {\n    key: "write",\n    value: function write(o, buf) {\n      if (buf instanceof ArrayBuffer) {\n        return this.write(o, new Uint8Array(buf));\n      } else if (typeof buf === \'string\') {\n        return this.write(o, buf.split(\'\').map(function (x) {\n          return x.charCodeAt(0);\n        }));\n      } else {\n        var dst = new Uint8Array(this.buffer, o, buf.length);\n        dst.set(buf);\n        return buf.length;\n      }\n    }\n  }]);\n}();\n;// CONCATENATED MODULE: ./src/wasm/errors.js\nfunction errors_typeof(o) { "@babel/helpers - typeof"; return errors_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, errors_typeof(o); }\nfunction errors_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, errors_toPropertyKey(o.key), o); } }\nfunction errors_createClass(e, r, t) { return r && errors_defineProperties(e.prototype, r), t && errors_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction errors_toPropertyKey(t) { var i = errors_toPrimitive(t, "string"); return "symbol" == errors_typeof(i) ? i : i + ""; }\nfunction errors_toPrimitive(t, r) { if ("object" != errors_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != errors_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction errors_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == errors_typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nvar ProcExit = /*#__PURE__*/function (_Error) {\n  function ProcExit(code) {\n    var _this;\n    errors_classCallCheck(this, ProcExit);\n    _this = _callSuper(this, ProcExit, ["process exited with code ".concat(code, ".")]);\n    _this.code = code;\n    return _this;\n  }\n  _inherits(ProcExit, _Error);\n  return errors_createClass(ProcExit);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar NotImplemented = /*#__PURE__*/function (_Error2) {\n  function NotImplemented(modname, fieldname) {\n    errors_classCallCheck(this, NotImplemented);\n    return _callSuper(this, NotImplemented, ["".concat(modname, ".").concat(fieldname, " not implemented.")]);\n  }\n  _inherits(NotImplemented, _Error2);\n  return errors_createClass(NotImplemented);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar AbortError = /*#__PURE__*/function (_Error3) {\n  function AbortError() {\n    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'abort\';\n    errors_classCallCheck(this, AbortError);\n    return _callSuper(this, AbortError, [msg]);\n  }\n  _inherits(AbortError, _Error3);\n  return errors_createClass(AbortError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar BuildError = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Error4) {\n  function BuildError(msg) {\n    errors_classCallCheck(this, BuildError);\n    return _callSuper(this, BuildError, [msg]);\n  }\n  _inherits(BuildError, _Error4);\n  return errors_createClass(BuildError);\n}( /*#__PURE__*/_wrapNativeSuper(Error))));\nvar AssertError = /*#__PURE__*/function (_Error5) {\n  function AssertError(msg) {\n    errors_classCallCheck(this, AssertError);\n    return _callSuper(this, AssertError, [msg]);\n  }\n  _inherits(AssertError, _Error5);\n  return errors_createClass(AssertError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar TimeoutError = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Error6) {\n  function TimeoutError() {\n    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'timeout\';\n    errors_classCallCheck(this, TimeoutError);\n    return _callSuper(this, TimeoutError, [msg]);\n  }\n  _inherits(TimeoutError, _Error6);\n  return errors_createClass(TimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error))));\nfunction assert(cond) {\n  if (!cond) {\n    throw new AssertError(\'assertion failed.\');\n  }\n}\n// EXTERNAL MODULE: ./node_modules/loglevel/lib/loglevel.js\nvar loglevel = __webpack_require__(73065);\n;// CONCATENATED MODULE: ./src/wasm/logger.js\n\nloglevel.setLevel(\'debug\');\n/* harmony default export */ const logger = (loglevel);\n;// CONCATENATED MODULE: ./src/wasm/memfs.js\nfunction memfs_typeof(o) { "@babel/helpers - typeof"; return memfs_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, memfs_typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == memfs_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(memfs_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction memfs_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction memfs_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, memfs_toPropertyKey(o.key), o); } }\nfunction memfs_createClass(e, r, t) { return r && memfs_defineProperties(e.prototype, r), t && memfs_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction memfs_toPropertyKey(t) { var i = memfs_toPrimitive(t, "string"); return "symbol" == memfs_typeof(i) ? i : i + ""; }\nfunction memfs_toPrimitive(t, r) { if ("object" != memfs_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != memfs_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n\n\nvar MemFS = /*#__PURE__*/function () {\n  function MemFS(options) {\n    memfs_classCallCheck(this, MemFS);\n    var compileStreaming = options.compileStreaming,\n      hostWrite = options.hostWrite,\n      _options$stdinStr = options.stdinStr,\n      stdinStr = _options$stdinStr === void 0 ? \'\' : _options$stdinStr,\n      memfsFilename = options.memfsFilename;\n    this.hostWriteCallback = hostWrite.bind(options);\n    this.stdinStr = stdinStr;\n    this.stdinStrPos = 0;\n    this.memfsFilename = memfsFilename;\n    this.hostMem_ = null; // Set later when wired up to application.\n    this.last_exit_code = 0;\n    this.capture = false; // Set to true to capture stdout/stderr and not write to host.\n    this.stdout = [];\n    this.stderr = [];\n    this.maxOutput = 1000;\n    this.outputCount = 0;\n\n    // Imports for memfs module.\n    var env = getImportObject(this, [\'abort\', \'host_write\', \'host_read\', \'memfs_log\', \'copy_in\', \'copy_out\']);\n    this.ready = this.initialize(compileStreaming, env);\n  }\n  return memfs_createClass(MemFS, [{\n    key: "initialize",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(compileStreaming, env) {\n        var module, instance;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return compileStreaming(this.memfsFilename);\n            case 2:\n              module = _context.sent;\n              _context.next = 5;\n              return WebAssembly.instantiate(module, {\n                env: env\n              });\n            case 5:\n              instance = _context.sent;\n              this.instance = instance;\n              this.exports = instance.exports;\n              this.mem = new Memory(this.exports.memory);\n              this.exports.init();\n            case 10:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initialize(_x, _x2) {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: "hostMem",\n    set: function set(mem) {\n      this.hostMem_ = mem;\n    }\n  }, {\n    key: "clear",\n    value: function clear() {\n      this.stdout = [];\n      this.stderr = [];\n      this.last_exit_code = 0;\n      this.outputCount = 0;\n    }\n  }, {\n    key: "hostWrite",\n    value: function hostWrite(fd, str) {\n      if (typeof str === \'string\') {\n        this.outputCount += str.length;\n        if (this.outputCount > this.maxOutput) {\n          this.outputCount = 0;\n          this.hostWriteCallback(fd, \'Output limit exceeded. Terminating...\');\n          this.abort();\n        }\n      }\n      if (!this.capture) {\n        this.hostWriteCallback(fd, str);\n      }\n      if (fd === 1) {\n        this.stdout.push(str);\n      } else if (fd === 2) {\n        this.stderr.push(str);\n      }\n    }\n  }, {\n    key: "startCapture",\n    value: function startCapture() {\n      this.capture = true;\n      this.stdout = [];\n      this.stderr = [];\n    }\n  }, {\n    key: "stopCapture",\n    value: function stopCapture() {\n      this.capture = false;\n      return {\n        stdout: this.stdout,\n        stderr: this.stderr\n      };\n    }\n  }, {\n    key: "setExitCode",\n    value: function setExitCode(code) {\n      this.last_exit_code = code;\n    }\n  }, {\n    key: "setStdinStr",\n    value: function setStdinStr(str) {\n      this.stdinStr = str;\n      this.stdinStrPos = 0;\n    }\n  }, {\n    key: "addDirectory",\n    value: function addDirectory(path) {\n      this.mem.check();\n      this.mem.write(this.exports.GetPathBuf(), path);\n      this.exports.AddDirectoryNode(path.length);\n    }\n  }, {\n    key: "addFile",\n    value: function addFile(path, contents) {\n      var length = contents instanceof ArrayBuffer ? contents.byteLength : contents.length;\n      this.mem.check();\n      this.mem.write(this.exports.GetPathBuf(), path);\n      var inode = this.exports.AddFileNode(path.length, length);\n      var addr = this.exports.GetFileNodeAddress(inode);\n      this.mem.check();\n      this.mem.write(addr, contents);\n    }\n  }, {\n    key: "getFileContents",\n    value: function getFileContents(path) {\n      this.mem.check();\n      this.mem.write(this.exports.GetPathBuf(), path);\n      var inode = this.exports.FindNode(path.length);\n      var addr = this.exports.GetFileNodeAddress(inode);\n      var size = this.exports.GetFileNodeSize(inode);\n      return new Uint8Array(this.mem.buffer, addr, size);\n    }\n  }, {\n    key: "abort",\n    value: function abort() {\n      throw new AbortError();\n    }\n  }, {\n    key: "host_write",\n    value: function host_write(fd, iovs, iovs_len, nwritten_out) {\n      this.hostMem_.check();\n      assert(fd <= 2);\n      var size = 0;\n      var str = \'\';\n      for (var i = 0; i < iovs_len; ++i) {\n        var buf = this.hostMem_.read32(iovs);\n        iovs += 4;\n        var len = this.hostMem_.read32(iovs);\n        iovs += 4;\n        str += this.hostMem_.readStr(buf, len);\n        size += len;\n      }\n      this.hostMem_.write32(nwritten_out, size);\n      this.hostWrite(fd, str);\n      return ESUCCESS;\n    }\n  }, {\n    key: "host_read",\n    value: function host_read(fd, iovs, iovs_len, nread) {\n      this.hostMem_.check();\n      assert(fd === 0);\n      var size = 0;\n      for (var i = 0; i < iovs_len; ++i) {\n        var buf = this.hostMem_.read32(iovs);\n        iovs += 4;\n        var len = this.hostMem_.read32(iovs);\n        iovs += 4;\n        var lenToWrite = Math.min(len, this.stdinStr.length - this.stdinStrPos);\n        if (lenToWrite === 0) {\n          break;\n        }\n        this.hostMem_.write(buf, this.stdinStr.substr(this.stdinStrPos, lenToWrite));\n        size += lenToWrite;\n        this.stdinStrPos += lenToWrite;\n        if (lenToWrite !== len) {\n          break;\n        }\n      }\n      this.hostMem_.write32(nread, size);\n      return ESUCCESS;\n    }\n  }, {\n    key: "memfs_log",\n    value: function memfs_log(buf, len) {\n      this.mem.check();\n      logger.info(this.mem.readStr(buf, len));\n    }\n  }, {\n    key: "copy_out",\n    value: function copy_out(clang_dst, memfs_src, size) {\n      this.hostMem_.check();\n      var dst = new Uint8Array(this.hostMem_.buffer, clang_dst, size);\n      this.mem.check();\n      var src = new Uint8Array(this.mem.buffer, memfs_src, size);\n      dst.set(src);\n    }\n  }, {\n    key: "copy_in",\n    value: function copy_in(memfs_dst, clang_src, size) {\n      this.mem.check();\n      var dst = new Uint8Array(this.mem.buffer, memfs_dst, size);\n      this.hostMem_.check();\n      var src = new Uint8Array(this.hostMem_.buffer, clang_src, size);\n      dst.set(src);\n    }\n  }]);\n}();\n;// CONCATENATED MODULE: ./src/wasm/tar.js\nfunction tar_typeof(o) { "@babel/helpers - typeof"; return tar_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, tar_typeof(o); }\nfunction tar_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction tar_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, tar_toPropertyKey(o.key), o); } }\nfunction tar_createClass(e, r, t) { return r && tar_defineProperties(e.prototype, r), t && tar_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction tar_toPropertyKey(t) { var i = tar_toPrimitive(t, "string"); return "symbol" == tar_typeof(i) ? i : i + ""; }\nfunction tar_toPrimitive(t, r) { if ("object" != tar_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != tar_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n/**\n * Untar a tar file into a MemFS instance.\n *\n * Typical usage is to load sysroot.tar.\n *\n * Author: Ben Smith (binji)\n */\n\n\n\nvar FILE_TYPE_REGULAR = \'0\';\nvar FILE_TYPE_DIRECTORY = \'5\';\nvar Tar = /*#__PURE__*/function () {\n  function Tar(buffer) {\n    tar_classCallCheck(this, Tar);\n    this.u8 = new Uint8Array(buffer);\n    this.offset = 0;\n  }\n  return tar_createClass(Tar, [{\n    key: "readStr",\n    value: function readStr(len) {\n      var result = utils_readStr(this.u8, this.offset, len);\n      this.offset += len;\n      return result;\n    }\n  }, {\n    key: "readOctal",\n    value: function readOctal(len) {\n      return parseInt(this.readStr(len), 8);\n    }\n  }, {\n    key: "alignUp",\n    value: function alignUp() {\n      this.offset = this.offset + 511 & ~511;\n    }\n  }, {\n    key: "readEntry",\n    value: function readEntry() {\n      if (this.offset + 512 > this.u8.length) {\n        return null;\n      }\n      var entry = {\n        filename: this.readStr(100),\n        mode: this.readOctal(8),\n        owner: this.readOctal(8),\n        group: this.readOctal(8),\n        size: this.readOctal(12),\n        mtim: this.readOctal(12),\n        checksum: this.readOctal(8),\n        type: this.readStr(1),\n        linkname: this.readStr(100)\n      };\n      if (this.readStr(8) !== \'ustar  \') {\n        return null;\n      }\n      entry.ownerName = this.readStr(32);\n      entry.groupName = this.readStr(32);\n      entry.devMajor = this.readStr(8);\n      entry.devMinor = this.readStr(8);\n      entry.filenamePrefix = this.readStr(155);\n      this.alignUp();\n      if (entry.type === FILE_TYPE_REGULAR) {\n        entry.contents = this.u8.subarray(this.offset, this.offset + entry.size);\n        this.offset += entry.size;\n        this.alignUp();\n      } else if (entry.type !== FILE_TYPE_DIRECTORY) {\n        logger.error("Unknown entry type: ".concat(entry.type));\n        assert(false);\n      }\n      return entry;\n    }\n  }, {\n    key: "untar",\n    value: function untar(memfs) {\n      var entry;\n      while ((entry = this.readEntry()) !== null) {\n        switch (entry.type) {\n          case FILE_TYPE_REGULAR:\n            memfs.addFile(entry.filename, entry.contents);\n            break;\n          case FILE_TYPE_DIRECTORY:\n            memfs.addDirectory(entry.filename);\n            break;\n        }\n      }\n    }\n  }]);\n}();\n;// CONCATENATED MODULE: ./src/wasm/runner.js\nfunction runner_construct(t, e, r) { if (runner_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && runner_setPrototypeOf(p, r.prototype), p; }\nfunction runner_setPrototypeOf(t, e) { return runner_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, runner_setPrototypeOf(t, e); }\nfunction runner_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (runner_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction runner_typeof(o) { "@babel/helpers - typeof"; return runner_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, runner_typeof(o); }\nfunction runner_toConsumableArray(r) { return runner_arrayWithoutHoles(r) || runner_iterableToArray(r) || runner_unsupportedIterableToArray(r) || runner_nonIterableSpread(); }\nfunction runner_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction runner_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction runner_arrayWithoutHoles(r) { if (Array.isArray(r)) return runner_arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = runner_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = runner_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction runner_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return runner_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? runner_arrayLikeToArray(r, a) : void 0; } }\nfunction runner_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction runner_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ runner_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == runner_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(runner_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction runner_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction runner_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { runner_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { runner_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction runner_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction runner_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, runner_toPropertyKey(o.key), o); } }\nfunction runner_createClass(e, r, t) { return r && runner_defineProperties(e.prototype, r), t && runner_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction runner_toPropertyKey(t) { var i = runner_toPrimitive(t, "string"); return "symbol" == runner_typeof(i) ? i : i + ""; }\nfunction runner_toPrimitive(t, r) { if ("object" != runner_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != runner_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n/**\n * CodeRunner for interacting building and running C/C++ code in\n * a WebAssembly environment.\n */\n\n\n\n\n\n\n\n/**\n * Built programs run in a sandbox with a WASI-like interface.\n * A built program is an instance of this class.\n *\n * This class is used to run a WebAssembly module in a sandbox.\n *\n * An app should be executed from a WebWorker, this would allow\n * to run the WebAssembly module in a separate thread and stop\n * it if it takes too long to execute (e.g. infinite loop).\n *\n * @param {WebAssembly.Module} exec - The WebAssembly module to run.\n * @param {MemFS} memfs - The MemFS instance to use.\n * @param {string} name - The name of the program used for argv[0].\n * @param {string[]} args - The arguments to pass to the program.\n */\nvar App = /*#__PURE__*/function () {\n  function App(exec, memfs, name) {\n    var _this = this;\n    runner_classCallCheck(this, App);\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    this.argv = [name].concat(args);\n    this.environ = {\n      USER: \'alice\'\n    };\n    this.memfs = memfs;\n    this.handles = new Map();\n    this.nextHandle = 0;\n\n    //const env = getImportObject(this, []);\n\n    var wasi_unstable = getImportObject(this, [\'proc_exit\', \'environ_sizes_get\', \'environ_get\', \'args_sizes_get\', \'args_get\', \'random_get\', \'clock_time_get\', \'poll_oneoff\']);\n\n    // Fill in some WASI implementations from memfs.\n    Object.assign(wasi_unstable, this.memfs.exports);\n    this.ready = WebAssembly.instantiate(exec, {\n      wasi_unstable: wasi_unstable\n    }).then(function (instance) {\n      _this.instance = instance;\n      _this.exports = _this.instance.exports;\n      _this.mem = new Memory(_this.exports.memory);\n      _this.memfs.hostMem = _this.mem;\n    });\n  }\n  return runner_createClass(App, [{\n    key: "run",\n    value: function () {\n      var _run = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        return runner_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.ready;\n            case 2:\n              return _context.abrupt("return", new Promise(function (resolve, reject) {\n                try {\n                  _this2.exports._start();\n                  _this2.memfs.setExitCode(0);\n                } catch (exn) {\n                  if (exn instanceof ProcExit) {\n                    _this2.memfs.setExitCode(exn.code);\n                  } else {\n                    reject(exn);\n                  }\n                } finally {\n                  _this2.memfs.hostWrite(\'exit\', _this2.memfs.last_exit_code);\n                  resolve({\n                    exitCode: _this2.memfs.last_exit_code,\n                    stdout: _this2.memfs.stdout,\n                    stderr: _this2.memfs.stderr\n                  });\n                }\n              }));\n            case 3:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function run() {\n        return _run.apply(this, arguments);\n      }\n      return run;\n    }()\n    /**\n     * System call to exit the program.\n     */\n  }, {\n    key: "proc_exit",\n    value: function proc_exit(code) {\n      throw new ProcExit(code);\n    }\n\n    /**\n     * System call to get the sizes of the environment variables.\n     */\n  }, {\n    key: "environ_sizes_get",\n    value: function environ_sizes_get(environ_count_out, environ_buf_size_out) {\n      this.mem.check();\n      var size = 0;\n      var names = Object.getOwnPropertyNames(this.environ);\n      var _iterator = _createForOfIteratorHelper(names),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          var value = this.environ[name];\n          size += name.length + value.length + 2;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.mem.write64(environ_count_out, names.length);\n      this.mem.write64(environ_buf_size_out, size);\n      return ESUCCESS;\n    }\n\n    /**\n     * System call to get the environment variables.\n     */\n  }, {\n    key: "environ_get",\n    value: function environ_get(environ_ptrs, environ_buf) {\n      this.mem.check();\n      var names = Object.getOwnPropertyNames(this.environ);\n      var _iterator2 = _createForOfIteratorHelper(names),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var name = _step2.value;\n          this.mem.write32(environ_ptrs, environ_buf);\n          environ_ptrs += 4;\n          environ_buf += this.mem.writeStr(environ_buf, "".concat(name, "=").concat(this.environ[name]));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this.mem.write32(environ_ptrs, 0);\n      return ESUCCESS;\n    }\n\n    /**\n     * System call to get the sizes of the arguments.\n     */\n  }, {\n    key: "args_sizes_get",\n    value: function args_sizes_get(argc_out, argv_buf_size_out) {\n      this.mem.check();\n      var size = 0;\n      var _iterator3 = _createForOfIteratorHelper(this.argv),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var arg = _step3.value;\n          size += arg.length + 1;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this.mem.write64(argc_out, this.argv.length);\n      this.mem.write64(argv_buf_size_out, size);\n      return ESUCCESS;\n    }\n\n    /**\n     * System call to get the arguments.\n     */\n  }, {\n    key: "args_get",\n    value: function args_get(argv_ptrs, argv_buf) {\n      this.mem.check();\n      var _iterator4 = _createForOfIteratorHelper(this.argv),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var arg = _step4.value;\n          this.mem.write32(argv_ptrs, argv_buf);\n          argv_ptrs += 4;\n          argv_buf += this.mem.writeStr(argv_buf, arg);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      this.mem.write32(argv_ptrs, 0);\n      return ESUCCESS;\n    }\n\n    /**\n     * System call to get random data.\n     */\n  }, {\n    key: "random_get",\n    value: function random_get(buf, buf_len) {\n      var data = new Uint8Array(this.mem.buffer, buf, buf_len);\n      for (var i = 0; i < buf_len; ++i) {\n        data[i] = Math.random() * 256 | 0;\n      }\n    }\n\n    /**\n     * System call to get the current time.\n     */\n  }, {\n    key: "clock_time_get",\n    value: function clock_time_get(clock_id, precision, time_out) {\n      throw new NotImplemented(\'wasi_unstable\', \'clock_time_get\');\n    }\n\n    /**\n     * System call to poll for events.\n     */\n  }, {\n    key: "poll_oneoff",\n    value: function poll_oneoff(in_ptr, out_ptr, nsubscriptions, nevents_out) {\n      throw new NotImplemented(\'wasi_unstable\', \'poll_oneoff\');\n    }\n  }]);\n}();\nvar CodeRunnerWorker = /*#__PURE__*/function () {\n  function CodeRunnerWorker(options) {\n    runner_classCallCheck(this, CodeRunnerWorker);\n    options = _objectSpread({\n      cargs: [\'-std=c++17\', \'-O2\', \'-ferror-limit\', \'1\', \'-fmessage-length\', \'80\', \'-x\', \'c++\'],\n      clargs: ["stack-size=".concat(1024 * 1024)]\n    }, options);\n    this.moduleCache = {};\n    this.readBuffer = options.readBuffer;\n    this.compileStreaming = options.compileStreaming;\n    this.clangFilename = new URL(/* asset import */ __webpack_require__(29947), __webpack_require__.b).href;\n    this.lldFilename = new URL(/* asset import */ __webpack_require__(89990), __webpack_require__.b).href;\n    this.sysrootFilename = new URL(/* asset import */ __webpack_require__(52360), __webpack_require__.b).href;\n    this.memfsFilename = new URL(/* asset import */ __webpack_require__(23152), __webpack_require__.b).href;\n    this.eventListener = null;\n    this.onNewCache = null;\n    this.clargs = options.clargs;\n    this.cargs = [\'-disable-free\', \'-isysroot\', \'/\', \'-internal-isystem\', \'/include/c++/v1\', \'-internal-isystem\', \'/include\', \'-internal-isystem\', \'/lib/clang/8.0.1/include\'].concat(runner_toConsumableArray(options.cargs));\n  }\n  return runner_createClass(CodeRunnerWorker, [{\n    key: "init",\n    value: function init() {\n      var _this3 = this;\n      logger.info(\'Initializing MemFS...\');\n      this.memfs = new MemFS({\n        compileStreaming: this.compileStreaming,\n        hostWrite: this.emit.bind(this),\n        memfsFilename: this.memfsFilename\n      });\n      runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee2() {\n        return runner_regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this3.untar(_this3.memfs, _this3.sysrootFilename);\n            case 2:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  }, {\n    key: "setOnNewCache",\n    value: function setOnNewCache(listener) {\n      this.onNewCache = listener;\n    }\n  }, {\n    key: "linkCachedModules",\n    value: function linkCachedModules(cache) {\n      this.moduleCache = cache;\n    }\n  }, {\n    key: "setListener",\n    value: function setListener(listener) {\n      this.eventListener = listener;\n    }\n  }, {\n    key: "emit",\n    value: function emit(event, message) {\n      if (typeof this.eventListener === \'function\') {\n        this.eventListener(event, message);\n      }\n    }\n  }, {\n    key: "getModule",\n    value: function () {\n      var _getModule = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee3(name) {\n        var module;\n        return runner_regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!this.moduleCache[name]) {\n                _context3.next = 3;\n                break;\n              }\n              logger.debug("Using cached module: ".concat(name, ", ").concat(runner_typeof(this.moduleCache[name])));\n              return _context3.abrupt("return", this.moduleCache[name]);\n            case 3:\n              logger.info("Fetching and compiling ".concat(name, "..."));\n              _context3.next = 6;\n              return this.compileStreaming(name);\n            case 6:\n              module = _context3.sent;\n              this.moduleCache[name] = module;\n              this.onNewCache(name, module);\n              return _context3.abrupt("return", module);\n            case 10:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getModule(_x) {\n        return _getModule.apply(this, arguments);\n      }\n      return getModule;\n    }()\n    /**\n     * Populate the MemFS with the contents of a tarball.\n     * It sets up the sysroot.\n     */\n  }, {\n    key: "untar",\n    value: (function () {\n      var _untar = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee4(memfs, filename) {\n        var tar;\n        return runner_regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.memfs.ready;\n            case 2:\n              logger.info(\'Untarring sysroot...\');\n              _context4.t0 = Tar;\n              _context4.next = 6;\n              return this.readBuffer(filename);\n            case 6:\n              _context4.t1 = _context4.sent;\n              tar = new _context4.t0(_context4.t1);\n              tar.untar(memfs);\n            case 9:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function untar(_x2, _x3) {\n        return _untar.apply(this, arguments);\n      }\n      return untar;\n    }()\n    /**\n     * Run a command in a module.\n     */\n    )\n  }, {\n    key: "run",\n    value: (function () {\n      var _run2 = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee5(module, command) {\n        var _len2,\n          args,\n          _key2,\n          app,\n          _args5 = arguments;\n        return runner_regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              for (_len2 = _args5.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n                args[_key2 - 2] = _args5[_key2];\n              }\n              logger.info("Executing ".concat(command, " ").concat(args.join(\' \'), "..."));\n              this.emit(\'echo\', "".concat(command, " ").concat(args.join(\' \')));\n              this.memfs.clear();\n              app = runner_construct(App, [module, this.memfs, command].concat(args));\n              return _context5.abrupt("return", app.run());\n            case 6:\n            case "end":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function run(_x4, _x5) {\n        return _run2.apply(this, arguments);\n      }\n      return run;\n    }())\n  }, {\n    key: "compile",\n    value: function () {\n      var _compile = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee6(input, contents, obj) {\n        var clang;\n        return runner_regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.ready;\n            case 2:\n              this.memfs.addFile(input, contents);\n              _context6.next = 5;\n              return this.getModule(this.clangFilename);\n            case 5:\n              clang = _context6.sent;\n              _context6.next = 8;\n              return this.run.apply(this, [clang, \'clang\', \'-cc1\', \'-emit-obj\'].concat(runner_toConsumableArray(this.cargs), [\'-o\', obj, input]));\n            case 8:\n              return _context6.abrupt("return", _context6.sent);\n            case 9:\n            case "end":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function compile(_x6, _x7, _x8) {\n        return _compile.apply(this, arguments);\n      }\n      return compile;\n    }()\n  }, {\n    key: "link",\n    value: function () {\n      var _link = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee7(obj, wasm) {\n        var libdir, crt1;\n        return runner_regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              libdir = \'lib/wasm32-wasi\';\n              crt1 = "".concat(libdir, "/crt1.o");\n              _context7.next = 4;\n              return this.ready;\n            case 4:\n              _context7.t0 = this.run;\n              _context7.t1 = this;\n              _context7.next = 8;\n              return this.getModule(this.lldFilename);\n            case 8:\n              _context7.t2 = _context7.sent;\n              _context7.t3 = [_context7.t2, \'wasm-ld\', \'--no-threads\', \'--export-dynamic\', \'-z\'].concat(runner_toConsumableArray(this.clargs), ["-L".concat(libdir), crt1, obj, \'-lc\', \'-lc++\', \'-lc++abi\', \'-o\', wasm]);\n              _context7.next = 12;\n              return _context7.t0.apply.call(_context7.t0, _context7.t1, _context7.t3);\n            case 12:\n              return _context7.abrupt("return", _context7.sent);\n            case 13:\n            case "end":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function link(_x9, _x10) {\n        return _link.apply(this, arguments);\n      }\n      return link;\n    }()\n  }, {\n    key: "build",\n    value: function () {\n      var _build = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee8() {\n        var options,\n          filename,\n          objname,\n          wasmname,\n          outputs,\n          _args8 = arguments;\n        return runner_regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n              filename = options.filename;\n              objname = filename.replace(/\\.[^.]*$/, \'.o\');\n              wasmname = filename.replace(/\\.[^.]*$/, \'.wasm\'); //this.memfs.startCapture();\n              _context8.next = 6;\n              return this.compile(filename, options.source, objname);\n            case 6:\n              outputs = _context8.sent;\n              if (!(outputs[\'exitCode\'] !== 0)) {\n                _context8.next = 9;\n                break;\n              }\n              return _context8.abrupt("return", outputs);\n            case 9:\n              _context8.next = 11;\n              return this.link(objname, wasmname);\n            case 11:\n              outputs = _context8.sent;\n              if (!(outputs[\'exitCode\'] !== 0)) {\n                _context8.next = 14;\n                break;\n              }\n              return _context8.abrupt("return", outputs);\n            case 14:\n              return _context8.abrupt("return", outputs);\n            case 15:\n            case "end":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function build() {\n        return _build.apply(this, arguments);\n      }\n      return build;\n    }()\n  }, {\n    key: "exec",\n    value: function () {\n      var _exec = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee9() {\n        var options,\n          exec,\n          _args9 = arguments;\n        return runner_regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n              options = _objectSpread({\n                filename: \'main.wasm\',\n                args: []\n              }, options);\n              _context9.next = 4;\n              return WebAssembly.compile(this.memfs.getFileContents(options.filename));\n            case 4:\n              exec = _context9.sent;\n              _context9.next = 7;\n              return this.run.apply(this, [exec, options.filename].concat(runner_toConsumableArray(options.args)));\n            case 7:\n              return _context9.abrupt("return", _context9.sent);\n            case 8:\n            case "end":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function exec() {\n        return _exec.apply(this, arguments);\n      }\n      return exec;\n    }()\n  }, {\n    key: "compileLinkRun",\n    value: function () {\n      var _compileLinkRun = runner_asyncToGenerator( /*#__PURE__*/runner_regeneratorRuntime().mark(function _callee10(source) {\n        var basename,\n          wasm,\n          exec,\n          _len3,\n          args,\n          _key3,\n          _args10 = arguments;\n        return runner_regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              basename = \'main\';\n              _context10.next = 3;\n              return this.build(source, basename);\n            case 3:\n              wasm = _context10.sent;\n              _context10.next = 6;\n              return WebAssembly.compile(this.memfs.getFileContents(wasm));\n            case 6:\n              exec = _context10.sent;\n              for (_len3 = _args10.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                args[_key3 - 1] = _args10[_key3];\n              }\n              return _context10.abrupt("return", this.run.apply(this, [exec, wasm].concat(args)));\n            case 9:\n            case "end":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function compileLinkRun(_x11) {\n        return _compileLinkRun.apply(this, arguments);\n      }\n      return compileLinkRun;\n    }()\n  }]);\n}();\n\n;// CONCATENATED MODULE: ./src/wasm/worker.js\nfunction worker_typeof(o) { "@babel/helpers - typeof"; return worker_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, worker_typeof(o); }\nfunction worker_toConsumableArray(r) { return worker_arrayWithoutHoles(r) || worker_iterableToArray(r) || worker_unsupportedIterableToArray(r) || worker_nonIterableSpread(); }\nfunction worker_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction worker_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return worker_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? worker_arrayLikeToArray(r, a) : void 0; } }\nfunction worker_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction worker_arrayWithoutHoles(r) { if (Array.isArray(r)) return worker_arrayLikeToArray(r); }\nfunction worker_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction worker_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ worker_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == worker_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(worker_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction worker_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction worker_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { worker_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { worker_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n\n\nvar codeRunner = new CodeRunnerWorker({\n  readBuffer: function readBuffer(filename) {\n    return worker_asyncToGenerator( /*#__PURE__*/worker_regeneratorRuntime().mark(function _callee() {\n      var response;\n      return worker_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(filename);\n          case 2:\n            response = _context.sent;\n            return _context.abrupt("return", response.arrayBuffer());\n          case 4:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  },\n  compileStreaming: function compileStreaming(filename) {\n    return worker_asyncToGenerator( /*#__PURE__*/worker_regeneratorRuntime().mark(function _callee2() {\n      var response;\n      return worker_regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(filename);\n          case 2:\n            response = _context2.sent;\n            _context2.t0 = WebAssembly;\n            _context2.next = 6;\n            return response.arrayBuffer();\n          case 6:\n            _context2.t1 = _context2.sent;\n            return _context2.abrupt("return", _context2.t0.compile.call(_context2.t0, _context2.t1));\n          case 8:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n});\nvar exposedMethods = {\n  build: function build(args) {\n    return codeRunner.build.apply(codeRunner, worker_toConsumableArray(args));\n  },\n  exec: function exec(args) {\n    return codeRunner.exec.apply(codeRunner, worker_toConsumableArray(args));\n  },\n  setListener: function setListener(listener) {\n    return codeRunner.setListener(comlink/* proxy */.BX(listener));\n  },\n  linkCachedModules: function linkCachedModules(cache) {\n    return codeRunner.linkCachedModules(cache);\n  },\n  setOnNewCache: function setOnNewCache(listener) {\n    return codeRunner.setOnNewCache(comlink/* proxy */.BX(listener));\n  },\n  init: function init() {\n    return codeRunner.init();\n  }\n};\ncomlink/* expose */.p(exposedMethods);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25572\n')}},__webpack_module_cache__={},deferred,next;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(U.exports,U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.x=()=>{var Q=__webpack_require__.O(void 0,[2646],(()=>__webpack_require__(25572)));return __webpack_require__.O(Q)},deferred=[],__webpack_require__.O=(Q,B,U,F)=>{if(!B){var t=1/0;for(E=0;E<deferred.length;E++){for(var[B,U,F]=deferred[E],s=!0,e=0;e<B.length;e++)(!1&F||t>=F)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[e])))?B.splice(e--,1):(s=!1,F<t&&(t=F));if(s){deferred.splice(E--,1);var n=U();void 0!==n&&(Q=n)}}return Q}F=F||0;for(var E=deferred.length;E>0&&deferred[E-1][2]>F;E--)deferred[E]=deferred[E-1];deferred[E]=[B,U,F]},__webpack_require__.d=(Q,B)=>{for(var U in B)__webpack_require__.o(B,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:B[U]})},__webpack_require__.f={},__webpack_require__.e=Q=>Promise.all(Object.keys(__webpack_require__.f).reduce(((B,U)=>(__webpack_require__.f[U](Q,B),B)),[])),__webpack_require__.u=Q=>"bundle."+Q+".js",__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),__webpack_require__.p="/js/",(()=>{__webpack_require__.b=self.location+"";var Q={5572:1};__webpack_require__.f.i=(B,U)=>{Q[B]||importScripts(__webpack_require__.p+__webpack_require__.u(B))};var B=self.webpackChunksandbox=self.webpackChunksandbox||[],U=B.push.bind(B);B.push=B=>{var[F,t,s]=B;for(var e in t)__webpack_require__.o(t,e)&&(__webpack_require__.m[e]=t[e]);for(s&&s(__webpack_require__);F.length;)Q[F.pop()]=1;U(B)}})(),next=__webpack_require__.x,__webpack_require__.x=()=>__webpack_require__.e(2646).then(next);var __webpack_exports__=__webpack_require__.x()})();