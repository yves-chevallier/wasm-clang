"use strict";(self.webpackChunksandbox=self.webpackChunksandbox||[]).push([[1560],{1560:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: "#",\n    blockComment: ["=begin", "=end"]\n  },\n  brackets: [\n    ["(", ")"],\n    ["{", "}"],\n    ["[", "]"]\n  ],\n  autoClosingPairs: [\n    { open: "{", close: "}" },\n    { open: "[", close: "]" },\n    { open: "(", close: ")" },\n    { open: \'"\', close: \'"\' },\n    { open: "\'", close: "\'" }\n  ],\n  surroundingPairs: [\n    { open: "{", close: "}" },\n    { open: "[", close: "]" },\n    { open: "(", close: ")" },\n    { open: \'"\', close: \'"\' },\n    { open: "\'", close: "\'" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\n      `^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|("|\'|/).*\\\\4)*(#.*)?$`\n    ),\n    decreaseIndentPattern: new RegExp(\n      "^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)"\n    )\n  }\n};\nvar language = {\n  tokenPostfix: ".ruby",\n  keywords: [\n    "__LINE__",\n    "__ENCODING__",\n    "__FILE__",\n    "BEGIN",\n    "END",\n    "alias",\n    "and",\n    "begin",\n    "break",\n    "case",\n    "class",\n    "def",\n    "defined?",\n    "do",\n    "else",\n    "elsif",\n    "end",\n    "ensure",\n    "for",\n    "false",\n    "if",\n    "in",\n    "module",\n    "next",\n    "nil",\n    "not",\n    "or",\n    "redo",\n    "rescue",\n    "retry",\n    "return",\n    "self",\n    "super",\n    "then",\n    "true",\n    "undef",\n    "unless",\n    "until",\n    "when",\n    "while",\n    "yield"\n  ],\n  keywordops: ["::", "..", "...", "?", ":", "=>"],\n  builtins: [\n    "require",\n    "public",\n    "private",\n    "include",\n    "extend",\n    "attr_reader",\n    "protected",\n    "private_class_method",\n    "protected_class_method",\n    "new"\n  ],\n  // these are closed by \'end\' (if, while and until are handled separately)\n  declarations: [\n    "module",\n    "class",\n    "def",\n    "case",\n    "do",\n    "begin",\n    "for",\n    "if",\n    "while",\n    "until",\n    "unless"\n  ],\n  linedecls: ["def", "case", "do", "begin", "for", "if", "while", "until", "unless"],\n  operators: [\n    "^",\n    "&",\n    "|",\n    "<=>",\n    "==",\n    "===",\n    "!~",\n    "=~",\n    ">",\n    ">=",\n    "<",\n    "<=",\n    "<<",\n    ">>",\n    "+",\n    "-",\n    "*",\n    "/",\n    "%",\n    "**",\n    "~",\n    "+@",\n    "-@",\n    "[]",\n    "[]=",\n    "`",\n    "+=",\n    "-=",\n    "*=",\n    "**=",\n    "/=",\n    "^=",\n    "%=",\n    "<<=",\n    ">>=",\n    "&=",\n    "&&=",\n    "||=",\n    "|="\n  ],\n  brackets: [\n    { open: "(", close: ")", token: "delimiter.parenthesis" },\n    { open: "{", close: "}", token: "delimiter.curly" },\n    { open: "[", close: "]", token: "delimiter.square" }\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  // escape sequences\n  escape: /(?:[abefnrstv\\\\"\'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|\'[^\']*\'|"[^"]*"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    // Main entry.\n    // root.<decl> where decl is the current opening declaration (like \'class\')\n    root: [\n      // identifiers and keywords\n      // most complexity here is due to matching \'end\' correctly with declarations.\n      // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n      [\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\n        [\n          "white",\n          {\n            cases: {\n              "for|until|while": {\n                token: "keyword.$2",\n                next: "@dodecl.$2"\n              },\n              "@declarations": {\n                token: "keyword.$2",\n                next: "@root.$2"\n              },\n              end: { token: "keyword.$S2", next: "@pop" },\n              "@keywords": "keyword",\n              "@builtins": "predefined",\n              "@default": "identifier"\n            }\n          }\n        ]\n      ],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            "if|unless|while|until": {\n              token: "keyword.$0x",\n              next: "@modifier.$0x"\n            },\n            for: { token: "keyword.$2", next: "@dodecl.$2" },\n            "@linedecls": { token: "keyword.$0", next: "@root.$0" },\n            end: { token: "keyword.$S2", next: "@pop" },\n            "@keywords": "keyword",\n            "@builtins": "predefined",\n            "@default": "identifier"\n          }\n        }\n      ],\n      [/[A-Z][\\w]*[!?=]?/, "constructor.identifier"],\n      // constant\n      [/\\$[\\w]*/, "global.constant"],\n      // global\n      [/@[\\w]*/, "namespace.instance.identifier"],\n      // instance\n      [/@@@[\\w]*/, "namespace.class.identifier"],\n      // class\n      // here document\n      [/<<[-~](@heredelim).*/, { token: "string.heredoc.delimiter", next: "@heredoc.$1" }],\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: "string.heredoc.delimiter", next: "@heredoc.$1" }],\n      [/^<<(@heredelim).*/, { token: "string.heredoc.delimiter", next: "@heredoc.$1" }],\n      // whitespace\n      { include: "@whitespace" },\n      // strings\n      [/"/, { token: "string.d.delim", next: \'@dstring.d."\' }],\n      [/\'/, { token: "string.sq.delim", next: "@sstring.sq" }],\n      // % literals. For efficiency, rematch in the \'pstring\' state\n      [/%([rsqxwW]|Q?)/, { token: "@rematch", next: "pstring" }],\n      // commands and symbols\n      [/`/, { token: "string.x.delim", next: "@dstring.x.`" }],\n      [/:(\\w|[$@])\\w*[!?=]?/, "string.s"],\n      [/:"/, { token: "string.s.delim", next: \'@dstring.s."\' }],\n      [/:\'/, { token: "string.s.delim", next: "@sstring.s" }],\n      // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: "regexp.delim", next: "@regexp" }],\n      // delimiters and operators\n      [/[{}()\\[\\]]/, "@brackets"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            "@keywordops": "keyword",\n            "@operators": "operator",\n            "@default": ""\n          }\n        }\n      ],\n      [/[;,]/, "delimiter"],\n      // numbers\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, "number.hex"],\n      [/0[_oO][0-7](_?[0-7])*/, "number.octal"],\n      [/0[bB][01](_?[01])*/, "number.binary"],\n      [/0[dD]@decpart/, "number"],\n      [\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n        {\n          cases: {\n            $1: "number.float",\n            "@default": "number"\n          }\n        }\n      ]\n    ],\n    // used to not treat a \'do\' as a block opener if it occurs on the same\n    // line as a \'do\' statement: \'while|until|for\'\n    // dodecl.<decl> where decl is the declarations started, like \'while\'\n    dodecl: [\n      [/^/, { token: "", switchTo: "@root.$S2" }],\n      // get out of do-skipping mode on a new line\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: "keyword.$S2", next: "@pop" },\n            // end on same line\n            do: { token: "keyword", switchTo: "@root.$S2" },\n            // do on same line: not an open bracket here\n            "@linedecls": {\n              token: "@rematch",\n              switchTo: "@root.$S2"\n            },\n            // other declaration on same line: rematch\n            "@keywords": "keyword",\n            "@builtins": "predefined",\n            "@default": "identifier"\n          }\n        }\n      ],\n      { include: "@root" }\n    ],\n    // used to prevent potential modifiers (\'if|until|while|unless\') to match\n    // with \'end\' keywords.\n    // modifier.<decl>x where decl is the declaration starter, like \'if\'\n    modifier: [\n      [/^/, "", "@pop"],\n      // it was a modifier: get out of modifier mode on a new line\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: "keyword.$S2", next: "@pop" },\n            // end on same line\n            "then|else|elsif|do": {\n              token: "keyword",\n              switchTo: "@root.$S2"\n            },\n            // real declaration and not a modifier\n            "@linedecls": {\n              token: "@rematch",\n              switchTo: "@root.$S2"\n            },\n            // other declaration => not a modifier\n            "@keywords": "keyword",\n            "@builtins": "predefined",\n            "@default": "identifier"\n          }\n        }\n      ],\n      { include: "@root" }\n    ],\n    // single quote strings (also used for symbols)\n    // sstring.<kind>  where kind is \'sq\' (single quote) or \'s\' (symbol)\n    sstring: [\n      [/[^\\\\\']+/, "string.$S2"],\n      [/\\\\\\\\|\\\\\'|\\\\$/, "string.$S2.escape"],\n      [/\\\\./, "string.$S2.invalid"],\n      [/\'/, { token: "string.$S2.delim", next: "@pop" }]\n    ],\n    // double quoted "string".\n    // dstring.<kind>.<delim> where kind is \'d\' (double quoted), \'x\' (command), or \'s\' (symbol)\n    // and delim is the ending delimiter (" or `)\n    dstring: [\n      [/[^\\\\`"#]+/, "string.$S2"],\n      [/#/, "string.$S2.escape", "@interpolated"],\n      [/\\\\$/, "string.$S2.escape"],\n      [/@escapes/, "string.$S2.escape"],\n      [/\\\\./, "string.$S2.escape.invalid"],\n      [\n        /[`"]/,\n        {\n          cases: {\n            "$#==$S3": { token: "string.$S2.delim", next: "@pop" },\n            "@default": "string.$S2"\n          }\n        }\n      ]\n    ],\n    // literal documents\n    // heredoc.<close> where close is the closing delimiter\n    heredoc: [\n      [\n        /^(\\s*)(@heredelim)$/,\n        {\n          cases: {\n            "$2==$S2": ["string.heredoc", { token: "string.heredoc.delimiter", next: "@pop" }],\n            "@default": ["string.heredoc", "string.heredoc"]\n          }\n        }\n      ],\n      [/.*/, "string.heredoc"]\n    ],\n    // interpolated sequence\n    interpolated: [\n      [/\\$\\w*/, "global.constant", "@pop"],\n      [/@\\w*/, "namespace.class.identifier", "@pop"],\n      [/@@@\\w*/, "namespace.instance.identifier", "@pop"],\n      [\n        /[{]/,\n        {\n          token: "string.escape.curly",\n          switchTo: "@interpolated_compound"\n        }\n      ],\n      ["", "", "@pop"]\n      // just a # is interpreted as a #\n    ],\n    // any code\n    interpolated_compound: [\n      [/[}]/, { token: "string.escape.curly", next: "@pop" }],\n      { include: "@root" }\n    ],\n    // %r quoted regexp\n    // pregexp.<open>.<close> where open/close are the open/close delimiter\n    pregexp: [\n      { include: "@whitespace" },\n      // turns out that you can quote using regex control characters, aargh!\n      // for example; %r|kgjgaj| is ok (even though | is used for alternation)\n      // so, we need to match those first\n      [\n        /[^\\(\\{\\[\\\\]/,\n        {\n          cases: {\n            "$#==$S3": { token: "regexp.delim", next: "@pop" },\n            "$#==$S2": { token: "regexp.delim", next: "@push" },\n            // nested delimiters are allowed..\n            "~[)}\\\\]]": "@brackets.regexp.escape.control",\n            "~@regexpctl": "regexp.escape.control",\n            "@default": "regexp"\n          }\n        }\n      ],\n      { include: "@regexcontrol" }\n    ],\n    // We match regular expression quite precisely\n    regexp: [\n      { include: "@regexcontrol" },\n      [/[^\\\\\\/]/, "regexp"],\n      ["/[ixmp]*", { token: "regexp.delim" }, "@pop"]\n    ],\n    regexcontrol: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\n          "@brackets.regexp.escape.control",\n          "regexp.escape.control",\n          "@brackets.regexp.escape.control"\n        ]\n      ],\n      [\n        /(\\[)(\\^?)/,\n        ["@brackets.regexp.escape.control", { token: "regexp.escape.control", next: "@regexrange" }]\n      ],\n      [/(\\()(\\?[:=!])/, ["@brackets.regexp.escape.control", "regexp.escape.control"]],\n      [/\\(\\?#/, { token: "regexp.escape.control", next: "@regexpcomment" }],\n      [/[()]/, "@brackets.regexp.escape.control"],\n      [/@regexpctl/, "regexp.escape.control"],\n      [/\\\\$/, "regexp.escape"],\n      [/@regexpesc/, "regexp.escape"],\n      [/\\\\\\./, "regexp.invalid"],\n      [/#/, "regexp.escape", "@interpolated"]\n    ],\n    regexrange: [\n      [/-/, "regexp.escape.control"],\n      [/\\^/, "regexp.invalid"],\n      [/\\\\$/, "regexp.escape"],\n      [/@regexpesc/, "regexp.escape"],\n      [/[^\\]]/, "regexp"],\n      [/\\]/, "@brackets.regexp.escape.control", "@pop"]\n    ],\n    regexpcomment: [\n      [/[^)]+/, "comment"],\n      [/\\)/, { token: "regexp.escape.control", next: "@pop" }]\n    ],\n    // % quoted strings\n    // A bit repetitive since we need to often special case the kind of ending delimiter\n    pstring: [\n      [/%([qws])\\(/, { token: "string.$1.delim", switchTo: "@qstring.$1.(.)" }],\n      [/%([qws])\\[/, { token: "string.$1.delim", switchTo: "@qstring.$1.[.]" }],\n      [/%([qws])\\{/, { token: "string.$1.delim", switchTo: "@qstring.$1.{.}" }],\n      [/%([qws])</, { token: "string.$1.delim", switchTo: "@qstring.$1.<.>" }],\n      [/%([qws])(@delim)/, { token: "string.$1.delim", switchTo: "@qstring.$1.$2.$2" }],\n      [/%r\\(/, { token: "regexp.delim", switchTo: "@pregexp.(.)" }],\n      [/%r\\[/, { token: "regexp.delim", switchTo: "@pregexp.[.]" }],\n      [/%r\\{/, { token: "regexp.delim", switchTo: "@pregexp.{.}" }],\n      [/%r</, { token: "regexp.delim", switchTo: "@pregexp.<.>" }],\n      [/%r(@delim)/, { token: "regexp.delim", switchTo: "@pregexp.$1.$1" }],\n      [/%(x|W|Q?)\\(/, { token: "string.$1.delim", switchTo: "@qqstring.$1.(.)" }],\n      [/%(x|W|Q?)\\[/, { token: "string.$1.delim", switchTo: "@qqstring.$1.[.]" }],\n      [/%(x|W|Q?)\\{/, { token: "string.$1.delim", switchTo: "@qqstring.$1.{.}" }],\n      [/%(x|W|Q?)</, { token: "string.$1.delim", switchTo: "@qqstring.$1.<.>" }],\n      [/%(x|W|Q?)(@delim)/, { token: "string.$1.delim", switchTo: "@qqstring.$1.$2.$2" }],\n      [/%([rqwsxW]|Q?)./, { token: "invalid", next: "@pop" }],\n      // recover\n      [/./, { token: "invalid", next: "@pop" }]\n      // recover\n    ],\n    // non-expanded quoted string.\n    // qstring.<kind>.<open>.<close>\n    //  kind = q|w|s  (single quote, array, symbol)\n    //  open = open delimiter\n    //  close = close delimiter\n    qstring: [\n      [/\\\\$/, "string.$S2.escape"],\n      [/\\\\./, "string.$S2.escape"],\n      [\n        /./,\n        {\n          cases: {\n            "$#==$S4": { token: "string.$S2.delim", next: "@pop" },\n            "$#==$S3": { token: "string.$S2.delim", next: "@push" },\n            // nested delimiters are allowed..\n            "@default": "string.$S2"\n          }\n        }\n      ]\n    ],\n    // expanded quoted string.\n    // qqstring.<kind>.<open>.<close>\n    //  kind = Q|W|x  (double quote, array, command)\n    //  open = open delimiter\n    //  close = close delimiter\n    qqstring: [[/#/, "string.$S2.escape", "@interpolated"], { include: "@qstring" }],\n    // whitespace & comments\n    whitespace: [\n      [/[ \\t\\r\\n]+/, ""],\n      [/^\\s*=begin\\b/, "comment", "@comment"],\n      [/#.*$/, "comment"]\n    ],\n    comment: [\n      [/[^=]+/, "comment"],\n      [/^\\s*=begin\\b/, "comment.invalid"],\n      // nested comment\n      [/^\\s*=end\\b.*/, "comment", "@pop"],\n      [/[=]/, "comment"]\n    ]\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1560\n')}}]);