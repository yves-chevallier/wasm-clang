"use strict";(self.webpackChunksandbox=self.webpackChunksandbox||[]).push([[5196],{45196:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/* harmony import */ var _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41925);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// src/basic-languages/python/python.ts\nvar conf = {\n  comments: {\n    lineComment: "#",\n    blockComment: ["\'\'\'", "\'\'\'"]\n  },\n  brackets: [\n    ["{", "}"],\n    ["[", "]"],\n    ["(", ")"]\n  ],\n  autoClosingPairs: [\n    { open: "{", close: "}" },\n    { open: "[", close: "]" },\n    { open: "(", close: ")" },\n    { open: \'"\', close: \'"\', notIn: ["string"] },\n    { open: "\'", close: "\'", notIn: ["string", "comment"] }\n  ],\n  surroundingPairs: [\n    { open: "{", close: "}" },\n    { open: "[", close: "]" },\n    { open: "(", close: ")" },\n    { open: \'"\', close: \'"\' },\n    { open: "\'", close: "\'" }\n  ],\n  onEnterRules: [\n    {\n      beforeText: new RegExp(\n        "^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async|match|case).*?:\\\\s*$"\n      ),\n      action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n    }\n  ],\n  folding: {\n    offSide: true,\n    markers: {\n      start: new RegExp("^\\\\s*#region\\\\b"),\n      end: new RegExp("^\\\\s*#endregion\\\\b")\n    }\n  }\n};\nvar language = {\n  defaultToken: "",\n  tokenPostfix: ".python",\n  keywords: [\n    // This section is the result of running\n    // `import keyword; for k in sorted(keyword.kwlist + keyword.softkwlist): print("  \'" + k + "\',")`\n    // in a Python REPL,\n    // though note that the output from Python 3 is not a strict superset of the\n    // output from Python 2.\n    "False",\n    // promoted to keyword.kwlist in Python 3\n    "None",\n    // promoted to keyword.kwlist in Python 3\n    "True",\n    // promoted to keyword.kwlist in Python 3\n    "_",\n    // new in Python 3.10\n    "and",\n    "as",\n    "assert",\n    "async",\n    // new in Python 3\n    "await",\n    // new in Python 3\n    "break",\n    "case",\n    // new in Python 3.10\n    "class",\n    "continue",\n    "def",\n    "del",\n    "elif",\n    "else",\n    "except",\n    "exec",\n    // Python 2, but not 3.\n    "finally",\n    "for",\n    "from",\n    "global",\n    "if",\n    "import",\n    "in",\n    "is",\n    "lambda",\n    "match",\n    // new in Python 3.10\n    "nonlocal",\n    // new in Python 3\n    "not",\n    "or",\n    "pass",\n    "print",\n    // Python 2, but not 3.\n    "raise",\n    "return",\n    "try",\n    "type",\n    // new in Python 3.12\n    "while",\n    "with",\n    "yield",\n    "int",\n    "float",\n    "long",\n    "complex",\n    "hex",\n    "abs",\n    "all",\n    "any",\n    "apply",\n    "basestring",\n    "bin",\n    "bool",\n    "buffer",\n    "bytearray",\n    "callable",\n    "chr",\n    "classmethod",\n    "cmp",\n    "coerce",\n    "compile",\n    "complex",\n    "delattr",\n    "dict",\n    "dir",\n    "divmod",\n    "enumerate",\n    "eval",\n    "execfile",\n    "file",\n    "filter",\n    "format",\n    "frozenset",\n    "getattr",\n    "globals",\n    "hasattr",\n    "hash",\n    "help",\n    "id",\n    "input",\n    "intern",\n    "isinstance",\n    "issubclass",\n    "iter",\n    "len",\n    "locals",\n    "list",\n    "map",\n    "max",\n    "memoryview",\n    "min",\n    "next",\n    "object",\n    "oct",\n    "open",\n    "ord",\n    "pow",\n    "print",\n    "property",\n    "reversed",\n    "range",\n    "raw_input",\n    "reduce",\n    "reload",\n    "repr",\n    "reversed",\n    "round",\n    "self",\n    "set",\n    "setattr",\n    "slice",\n    "sorted",\n    "staticmethod",\n    "str",\n    "sum",\n    "super",\n    "tuple",\n    "type",\n    "unichr",\n    "unicode",\n    "vars",\n    "xrange",\n    "zip",\n    "__dict__",\n    "__methods__",\n    "__members__",\n    "__class__",\n    "__bases__",\n    "__name__",\n    "__mro__",\n    "__subclasses__",\n    "__init__",\n    "__import__"\n  ],\n  brackets: [\n    { open: "{", close: "}", token: "delimiter.curly" },\n    { open: "[", close: "]", token: "delimiter.bracket" },\n    { open: "(", close: ")", token: "delimiter.parenthesis" }\n  ],\n  tokenizer: {\n    root: [\n      { include: "@whitespace" },\n      { include: "@numbers" },\n      { include: "@strings" },\n      [/[,:;]/, "delimiter"],\n      [/[{}\\[\\]()]/, "@brackets"],\n      [/@[a-zA-Z_]\\w*/, "tag"],\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            "@keywords": "keyword",\n            "@default": "identifier"\n          }\n        }\n      ]\n    ],\n    // Deal with white space, including single and multi-line comments\n    whitespace: [\n      [/\\s+/, "white"],\n      [/(^#.*$)/, "comment"],\n      [/\'\'\'/, "string", "@endDocString"],\n      [/"""/, "string", "@endDblDocString"]\n    ],\n    endDocString: [\n      [/[^\']+/, "string"],\n      [/\\\\\'/, "string"],\n      [/\'\'\'/, "string", "@popall"],\n      [/\'/, "string"]\n    ],\n    endDblDocString: [\n      [/[^"]+/, "string"],\n      [/\\\\"/, "string"],\n      [/"""/, "string", "@popall"],\n      [/"/, "string"]\n    ],\n    // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n    numbers: [\n      [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, "number.hex"],\n      [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, "number"]\n    ],\n    // Recognize strings, including those broken across lines with \\ (but not without)\n    strings: [\n      [/\'$/, "string.escape", "@popall"],\n      [/f\'{1,3}/, "string.escape", "@fStringBody"],\n      [/\'/, "string.escape", "@stringBody"],\n      [/"$/, "string.escape", "@popall"],\n      [/f"{1,3}/, "string.escape", "@fDblStringBody"],\n      [/"/, "string.escape", "@dblStringBody"]\n    ],\n    fStringBody: [\n      [/[^\\\\\'\\{\\}]+$/, "string", "@popall"],\n      [/[^\\\\\'\\{\\}]+/, "string"],\n      [/\\{[^\\}\':!=]+/, "identifier", "@fStringDetail"],\n      [/\\\\./, "string"],\n      [/\'/, "string.escape", "@popall"],\n      [/\\\\$/, "string"]\n    ],\n    stringBody: [\n      [/[^\\\\\']+$/, "string", "@popall"],\n      [/[^\\\\\']+/, "string"],\n      [/\\\\./, "string"],\n      [/\'/, "string.escape", "@popall"],\n      [/\\\\$/, "string"]\n    ],\n    fDblStringBody: [\n      [/[^\\\\"\\{\\}]+$/, "string", "@popall"],\n      [/[^\\\\"\\{\\}]+/, "string"],\n      [/\\{[^\\}\':!=]+/, "identifier", "@fStringDetail"],\n      [/\\\\./, "string"],\n      [/"/, "string.escape", "@popall"],\n      [/\\\\$/, "string"]\n    ],\n    dblStringBody: [\n      [/[^\\\\"]+$/, "string", "@popall"],\n      [/[^\\\\"]+/, "string"],\n      [/\\\\./, "string"],\n      [/"/, "string.escape", "@popall"],\n      [/\\\\$/, "string"]\n    ],\n    fStringDetail: [\n      [/[:][^}]+/, "string"],\n      [/[!][ars]/, "string"],\n      // only !a, !r, !s are supported by f-strings: https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals\n      [/=/, "string"],\n      [/\\}/, "identifier", "@pop"]\n    ]\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixVQUFVLElBQUk7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FuZGJveC8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvcHl0aG9uL3B5dGhvbi5qcz9mMWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFZlcnNpb246IDAuNTAuMChjMzIxZDBmYmVjYjUwYWI4YTUzNjVmYTE5NjU0NzZiMGFlNjNmYzg3KVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvYmxvYi9tYWluL0xJQ0VOU0UudHh0XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xuXG4vLyBzcmMvZmlsbGVycy9tb25hY28tZWRpdG9yLWNvcmUudHNcbnZhciBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cyA9IHt9O1xuX19yZUV4cG9ydChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cywgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIpO1xuaW1wb3J0ICogYXMgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIgZnJvbSBcIi4uLy4uL2VkaXRvci9lZGl0b3IuYXBpLmpzXCI7XG5cbi8vIHNyYy9iYXNpYy1sYW5ndWFnZXMvcHl0aG9uL3B5dGhvbi50c1xudmFyIGNvbmYgPSB7XG4gIGNvbW1lbnRzOiB7XG4gICAgbGluZUNvbW1lbnQ6IFwiI1wiLFxuICAgIGJsb2NrQ29tbWVudDogW1wiJycnXCIsIFwiJycnXCJdXG4gIH0sXG4gIGJyYWNrZXRzOiBbXG4gICAgW1wie1wiLCBcIn1cIl0sXG4gICAgW1wiW1wiLCBcIl1cIl0sXG4gICAgW1wiKFwiLCBcIilcIl1cbiAgXSxcbiAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgIHsgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiB9LFxuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbXCJzdHJpbmdcIl0gfSxcbiAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIsIG5vdEluOiBbXCJzdHJpbmdcIiwgXCJjb21tZW50XCJdIH1cbiAgXSxcbiAgc3Vycm91bmRpbmdQYWlyczogW1xuICAgIHsgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiB9LFxuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfSxcbiAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIgfVxuICBdLFxuICBvbkVudGVyUnVsZXM6IFtcbiAgICB7XG4gICAgICBiZWZvcmVUZXh0OiBuZXcgUmVnRXhwKFxuICAgICAgICBcIl5cXFxccyooPzpkZWZ8Y2xhc3N8Zm9yfGlmfGVsaWZ8ZWxzZXx3aGlsZXx0cnl8d2l0aHxmaW5hbGx5fGV4Y2VwdHxhc3luY3xtYXRjaHxjYXNlKS4qPzpcXFxccyokXCJcbiAgICAgICksXG4gICAgICBhY3Rpb246IHsgaW5kZW50QWN0aW9uOiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuSW5kZW50QWN0aW9uLkluZGVudCB9XG4gICAgfVxuICBdLFxuICBmb2xkaW5nOiB7XG4gICAgb2ZmU2lkZTogdHJ1ZSxcbiAgICBtYXJrZXJzOiB7XG4gICAgICBzdGFydDogbmV3IFJlZ0V4cChcIl5cXFxccyojcmVnaW9uXFxcXGJcIiksXG4gICAgICBlbmQ6IG5ldyBSZWdFeHAoXCJeXFxcXHMqI2VuZHJlZ2lvblxcXFxiXCIpXG4gICAgfVxuICB9XG59O1xudmFyIGxhbmd1YWdlID0ge1xuICBkZWZhdWx0VG9rZW46IFwiXCIsXG4gIHRva2VuUG9zdGZpeDogXCIucHl0aG9uXCIsXG4gIGtleXdvcmRzOiBbXG4gICAgLy8gVGhpcyBzZWN0aW9uIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZ1xuICAgIC8vIGBpbXBvcnQga2V5d29yZDsgZm9yIGsgaW4gc29ydGVkKGtleXdvcmQua3dsaXN0ICsga2V5d29yZC5zb2Z0a3dsaXN0KTogcHJpbnQoXCIgICdcIiArIGsgKyBcIicsXCIpYFxuICAgIC8vIGluIGEgUHl0aG9uIFJFUEwsXG4gICAgLy8gdGhvdWdoIG5vdGUgdGhhdCB0aGUgb3V0cHV0IGZyb20gUHl0aG9uIDMgaXMgbm90IGEgc3RyaWN0IHN1cGVyc2V0IG9mIHRoZVxuICAgIC8vIG91dHB1dCBmcm9tIFB5dGhvbiAyLlxuICAgIFwiRmFsc2VcIixcbiAgICAvLyBwcm9tb3RlZCB0byBrZXl3b3JkLmt3bGlzdCBpbiBQeXRob24gM1xuICAgIFwiTm9uZVwiLFxuICAgIC8vIHByb21vdGVkIHRvIGtleXdvcmQua3dsaXN0IGluIFB5dGhvbiAzXG4gICAgXCJUcnVlXCIsXG4gICAgLy8gcHJvbW90ZWQgdG8ga2V5d29yZC5rd2xpc3QgaW4gUHl0aG9uIDNcbiAgICBcIl9cIixcbiAgICAvLyBuZXcgaW4gUHl0aG9uIDMuMTBcbiAgICBcImFuZFwiLFxuICAgIFwiYXNcIixcbiAgICBcImFzc2VydFwiLFxuICAgIFwiYXN5bmNcIixcbiAgICAvLyBuZXcgaW4gUHl0aG9uIDNcbiAgICBcImF3YWl0XCIsXG4gICAgLy8gbmV3IGluIFB5dGhvbiAzXG4gICAgXCJicmVha1wiLFxuICAgIFwiY2FzZVwiLFxuICAgIC8vIG5ldyBpbiBQeXRob24gMy4xMFxuICAgIFwiY2xhc3NcIixcbiAgICBcImNvbnRpbnVlXCIsXG4gICAgXCJkZWZcIixcbiAgICBcImRlbFwiLFxuICAgIFwiZWxpZlwiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZXhjZXB0XCIsXG4gICAgXCJleGVjXCIsXG4gICAgLy8gUHl0aG9uIDIsIGJ1dCBub3QgMy5cbiAgICBcImZpbmFsbHlcIixcbiAgICBcImZvclwiLFxuICAgIFwiZnJvbVwiLFxuICAgIFwiZ2xvYmFsXCIsXG4gICAgXCJpZlwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJpblwiLFxuICAgIFwiaXNcIixcbiAgICBcImxhbWJkYVwiLFxuICAgIFwibWF0Y2hcIixcbiAgICAvLyBuZXcgaW4gUHl0aG9uIDMuMTBcbiAgICBcIm5vbmxvY2FsXCIsXG4gICAgLy8gbmV3IGluIFB5dGhvbiAzXG4gICAgXCJub3RcIixcbiAgICBcIm9yXCIsXG4gICAgXCJwYXNzXCIsXG4gICAgXCJwcmludFwiLFxuICAgIC8vIFB5dGhvbiAyLCBidXQgbm90IDMuXG4gICAgXCJyYWlzZVwiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJ0cnlcIixcbiAgICBcInR5cGVcIixcbiAgICAvLyBuZXcgaW4gUHl0aG9uIDMuMTJcbiAgICBcIndoaWxlXCIsXG4gICAgXCJ3aXRoXCIsXG4gICAgXCJ5aWVsZFwiLFxuICAgIFwiaW50XCIsXG4gICAgXCJmbG9hdFwiLFxuICAgIFwibG9uZ1wiLFxuICAgIFwiY29tcGxleFwiLFxuICAgIFwiaGV4XCIsXG4gICAgXCJhYnNcIixcbiAgICBcImFsbFwiLFxuICAgIFwiYW55XCIsXG4gICAgXCJhcHBseVwiLFxuICAgIFwiYmFzZXN0cmluZ1wiLFxuICAgIFwiYmluXCIsXG4gICAgXCJib29sXCIsXG4gICAgXCJidWZmZXJcIixcbiAgICBcImJ5dGVhcnJheVwiLFxuICAgIFwiY2FsbGFibGVcIixcbiAgICBcImNoclwiLFxuICAgIFwiY2xhc3NtZXRob2RcIixcbiAgICBcImNtcFwiLFxuICAgIFwiY29lcmNlXCIsXG4gICAgXCJjb21waWxlXCIsXG4gICAgXCJjb21wbGV4XCIsXG4gICAgXCJkZWxhdHRyXCIsXG4gICAgXCJkaWN0XCIsXG4gICAgXCJkaXJcIixcbiAgICBcImRpdm1vZFwiLFxuICAgIFwiZW51bWVyYXRlXCIsXG4gICAgXCJldmFsXCIsXG4gICAgXCJleGVjZmlsZVwiLFxuICAgIFwiZmlsZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJmb3JtYXRcIixcbiAgICBcImZyb3plbnNldFwiLFxuICAgIFwiZ2V0YXR0clwiLFxuICAgIFwiZ2xvYmFsc1wiLFxuICAgIFwiaGFzYXR0clwiLFxuICAgIFwiaGFzaFwiLFxuICAgIFwiaGVscFwiLFxuICAgIFwiaWRcIixcbiAgICBcImlucHV0XCIsXG4gICAgXCJpbnRlcm5cIixcbiAgICBcImlzaW5zdGFuY2VcIixcbiAgICBcImlzc3ViY2xhc3NcIixcbiAgICBcIml0ZXJcIixcbiAgICBcImxlblwiLFxuICAgIFwibG9jYWxzXCIsXG4gICAgXCJsaXN0XCIsXG4gICAgXCJtYXBcIixcbiAgICBcIm1heFwiLFxuICAgIFwibWVtb3J5dmlld1wiLFxuICAgIFwibWluXCIsXG4gICAgXCJuZXh0XCIsXG4gICAgXCJvYmplY3RcIixcbiAgICBcIm9jdFwiLFxuICAgIFwib3BlblwiLFxuICAgIFwib3JkXCIsXG4gICAgXCJwb3dcIixcbiAgICBcInByaW50XCIsXG4gICAgXCJwcm9wZXJ0eVwiLFxuICAgIFwicmV2ZXJzZWRcIixcbiAgICBcInJhbmdlXCIsXG4gICAgXCJyYXdfaW5wdXRcIixcbiAgICBcInJlZHVjZVwiLFxuICAgIFwicmVsb2FkXCIsXG4gICAgXCJyZXByXCIsXG4gICAgXCJyZXZlcnNlZFwiLFxuICAgIFwicm91bmRcIixcbiAgICBcInNlbGZcIixcbiAgICBcInNldFwiLFxuICAgIFwic2V0YXR0clwiLFxuICAgIFwic2xpY2VcIixcbiAgICBcInNvcnRlZFwiLFxuICAgIFwic3RhdGljbWV0aG9kXCIsXG4gICAgXCJzdHJcIixcbiAgICBcInN1bVwiLFxuICAgIFwic3VwZXJcIixcbiAgICBcInR1cGxlXCIsXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJ1bmljaHJcIixcbiAgICBcInVuaWNvZGVcIixcbiAgICBcInZhcnNcIixcbiAgICBcInhyYW5nZVwiLFxuICAgIFwiemlwXCIsXG4gICAgXCJfX2RpY3RfX1wiLFxuICAgIFwiX19tZXRob2RzX19cIixcbiAgICBcIl9fbWVtYmVyc19fXCIsXG4gICAgXCJfX2NsYXNzX19cIixcbiAgICBcIl9fYmFzZXNfX1wiLFxuICAgIFwiX19uYW1lX19cIixcbiAgICBcIl9fbXJvX19cIixcbiAgICBcIl9fc3ViY2xhc3Nlc19fXCIsXG4gICAgXCJfX2luaXRfX1wiLFxuICAgIFwiX19pbXBvcnRfX1wiXG4gIF0sXG4gIGJyYWNrZXRzOiBbXG4gICAgeyBvcGVuOiBcIntcIiwgY2xvc2U6IFwifVwiLCB0b2tlbjogXCJkZWxpbWl0ZXIuY3VybHlcIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiwgdG9rZW46IFwiZGVsaW1pdGVyLmJyYWNrZXRcIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiwgdG9rZW46IFwiZGVsaW1pdGVyLnBhcmVudGhlc2lzXCIgfVxuICBdLFxuICB0b2tlbml6ZXI6IHtcbiAgICByb290OiBbXG4gICAgICB7IGluY2x1ZGU6IFwiQHdoaXRlc3BhY2VcIiB9LFxuICAgICAgeyBpbmNsdWRlOiBcIkBudW1iZXJzXCIgfSxcbiAgICAgIHsgaW5jbHVkZTogXCJAc3RyaW5nc1wiIH0sXG4gICAgICBbL1ssOjtdLywgXCJkZWxpbWl0ZXJcIl0sXG4gICAgICBbL1t7fVxcW1xcXSgpXS8sIFwiQGJyYWNrZXRzXCJdLFxuICAgICAgWy9AW2EtekEtWl9dXFx3Ki8sIFwidGFnXCJdLFxuICAgICAgW1xuICAgICAgICAvW2EtekEtWl9dXFx3Ki8sXG4gICAgICAgIHtcbiAgICAgICAgICBjYXNlczoge1xuICAgICAgICAgICAgXCJAa2V5d29yZHNcIjogXCJrZXl3b3JkXCIsXG4gICAgICAgICAgICBcIkBkZWZhdWx0XCI6IFwiaWRlbnRpZmllclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgXSxcbiAgICAvLyBEZWFsIHdpdGggd2hpdGUgc3BhY2UsIGluY2x1ZGluZyBzaW5nbGUgYW5kIG11bHRpLWxpbmUgY29tbWVudHNcbiAgICB3aGl0ZXNwYWNlOiBbXG4gICAgICBbL1xccysvLCBcIndoaXRlXCJdLFxuICAgICAgWy8oXiMuKiQpLywgXCJjb21tZW50XCJdLFxuICAgICAgWy8nJycvLCBcInN0cmluZ1wiLCBcIkBlbmREb2NTdHJpbmdcIl0sXG4gICAgICBbL1wiXCJcIi8sIFwic3RyaW5nXCIsIFwiQGVuZERibERvY1N0cmluZ1wiXVxuICAgIF0sXG4gICAgZW5kRG9jU3RyaW5nOiBbXG4gICAgICBbL1teJ10rLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1xcXFwnLywgXCJzdHJpbmdcIl0sXG4gICAgICBbLycnJy8sIFwic3RyaW5nXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nXCJdXG4gICAgXSxcbiAgICBlbmREYmxEb2NTdHJpbmc6IFtcbiAgICAgIFsvW15cIl0rLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1xcXFxcIi8sIFwic3RyaW5nXCJdLFxuICAgICAgWy9cIlwiXCIvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbL1wiLywgXCJzdHJpbmdcIl1cbiAgICBdLFxuICAgIC8vIFJlY29nbml6ZSBoZXgsIG5lZ2F0aXZlcywgZGVjaW1hbHMsIGltYWdpbmFyaWVzLCBsb25ncywgYW5kIHNjaWVudGlmaWMgbm90YXRpb25cbiAgICBudW1iZXJzOiBbXG4gICAgICBbLy0/MHgoW2FiY2RlZl18W0FCQ0RFRl18XFxkKStbbExdPy8sIFwibnVtYmVyLmhleFwiXSxcbiAgICAgIFsvLT8oXFxkKlxcLik/XFxkKyhbZUVdWytcXC1dP1xcZCspP1tqSl0/W2xMXT8vLCBcIm51bWJlclwiXVxuICAgIF0sXG4gICAgLy8gUmVjb2duaXplIHN0cmluZ3MsIGluY2x1ZGluZyB0aG9zZSBicm9rZW4gYWNyb3NzIGxpbmVzIHdpdGggXFwgKGJ1dCBub3Qgd2l0aG91dClcbiAgICBzdHJpbmdzOiBbXG4gICAgICBbLyckLywgXCJzdHJpbmcuZXNjYXBlXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvZid7MSwzfS8sIFwic3RyaW5nLmVzY2FwZVwiLCBcIkBmU3RyaW5nQm9keVwiXSxcbiAgICAgIFsvJy8sIFwic3RyaW5nLmVzY2FwZVwiLCBcIkBzdHJpbmdCb2R5XCJdLFxuICAgICAgWy9cIiQvLCBcInN0cmluZy5lc2NhcGVcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9mXCJ7MSwzfS8sIFwic3RyaW5nLmVzY2FwZVwiLCBcIkBmRGJsU3RyaW5nQm9keVwiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZy5lc2NhcGVcIiwgXCJAZGJsU3RyaW5nQm9keVwiXVxuICAgIF0sXG4gICAgZlN0cmluZ0JvZHk6IFtcbiAgICAgIFsvW15cXFxcJ1xce1xcfV0rJC8sIFwic3RyaW5nXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvW15cXFxcJ1xce1xcfV0rLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1xce1teXFx9JzohPV0rLywgXCJpZGVudGlmaWVyXCIsIFwiQGZTdHJpbmdEZXRhaWxcIl0sXG4gICAgICBbL1xcXFwuLywgXCJzdHJpbmdcIl0sXG4gICAgICBbLycvLCBcInN0cmluZy5lc2NhcGVcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9cXFxcJC8sIFwic3RyaW5nXCJdXG4gICAgXSxcbiAgICBzdHJpbmdCb2R5OiBbXG4gICAgICBbL1teXFxcXCddKyQvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbL1teXFxcXCddKy8sIFwic3RyaW5nXCJdLFxuICAgICAgWy9cXFxcLi8sIFwic3RyaW5nXCJdLFxuICAgICAgWy8nLywgXCJzdHJpbmcuZXNjYXBlXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvXFxcXCQvLCBcInN0cmluZ1wiXVxuICAgIF0sXG4gICAgZkRibFN0cmluZ0JvZHk6IFtcbiAgICAgIFsvW15cXFxcXCJcXHtcXH1dKyQvLCBcInN0cmluZ1wiLCBcIkBwb3BhbGxcIl0sXG4gICAgICBbL1teXFxcXFwiXFx7XFx9XSsvLCBcInN0cmluZ1wiXSxcbiAgICAgIFsvXFx7W15cXH0nOiE9XSsvLCBcImlkZW50aWZpZXJcIiwgXCJAZlN0cmluZ0RldGFpbFwiXSxcbiAgICAgIFsvXFxcXC4vLCBcInN0cmluZ1wiXSxcbiAgICAgIFsvXCIvLCBcInN0cmluZy5lc2NhcGVcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9cXFxcJC8sIFwic3RyaW5nXCJdXG4gICAgXSxcbiAgICBkYmxTdHJpbmdCb2R5OiBbXG4gICAgICBbL1teXFxcXFwiXSskLywgXCJzdHJpbmdcIiwgXCJAcG9wYWxsXCJdLFxuICAgICAgWy9bXlxcXFxcIl0rLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1xcXFwuLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1wiLywgXCJzdHJpbmcuZXNjYXBlXCIsIFwiQHBvcGFsbFwiXSxcbiAgICAgIFsvXFxcXCQvLCBcInN0cmluZ1wiXVxuICAgIF0sXG4gICAgZlN0cmluZ0RldGFpbDogW1xuICAgICAgWy9bOl1bXn1dKy8sIFwic3RyaW5nXCJdLFxuICAgICAgWy9bIV1bYXJzXS8sIFwic3RyaW5nXCJdLFxuICAgICAgLy8gb25seSAhYSwgIXIsICFzIGFyZSBzdXBwb3J0ZWQgYnkgZi1zdHJpbmdzOiBodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL3R1dG9yaWFsL2lucHV0b3V0cHV0Lmh0bWwjZm9ybWF0dGVkLXN0cmluZy1saXRlcmFsc1xuICAgICAgWy89LywgXCJzdHJpbmdcIl0sXG4gICAgICBbL1xcfS8sIFwiaWRlbnRpZmllclwiLCBcIkBwb3BcIl1cbiAgICBdXG4gIH1cbn07XG5leHBvcnQge1xuICBjb25mLFxuICBsYW5ndWFnZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45196\n')}}]);